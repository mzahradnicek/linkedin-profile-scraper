{"version":3,"file":"index.js","sourceRoot":"/","sources":["utils/index.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment-timezone'\nimport { Location } from '../index';\nimport { Page } from 'puppeteer';\nimport countries from 'i18n-iso-countries';\nimport cities from 'all-the-cities';\n\nexport const getIsCountry = (text: string): boolean => {\n  const countriesList = Object.values(countries.getNames('en'));\n  const lowerCaseText = text.toLowerCase();\n\n  // Some custom text that we assume is also a country (lower cased)\n  // But is not detected correctly by the iso-countries module\n  if (['united states', 'the netherlands'].includes(lowerCaseText)) {\n    return true;\n  }\n\n  return !!countriesList.find(country => country.toLowerCase() === lowerCaseText);\n}\n\nexport const getIsCity = (text: string): boolean => {\n  const lowerCaseText = text.toLowerCase();\n\n  if (['new york'].includes(lowerCaseText)) {\n    return true;\n  }\n\n  return !!cities.find(city => city.name.toLowerCase() === lowerCaseText)\n}\n\nexport const formatDate = (date: moment.MomentInput | string): string => {\n  if (date === 'Present') {\n    return moment().format()\n  }\n\n  return moment(date, 'MMMY').format()\n}\n\nexport const getDurationInDays = (formattedStartDate: string, formattedEndDate: Date | string): number | null => {\n  if (!formattedStartDate || !formattedEndDate) return null\n  // +1 to include the start date\n  return moment(formattedEndDate).diff(moment(formattedStartDate), 'days') + 1\n}\n\nexport const getLocationFromText = (text: string): Location | null => {\n  // Text is something like: Amsterdam Oud-West, North Holland Province, Netherlands\n\n  if (!text) return null\n\n  const cleanText = text.replace(' Area', '').trim();\n  const parts = cleanText.split(', ');\n\n  let city: null | string = null\n  let province: null | string = null\n  let country: null | string = null\n\n  // If there are 3 parts, we can be sure of the order of each part\n  // So that must be a: city, province/state and country\n  if (parts.length === 3) {\n    city = parts[0]\n    province = parts[1]\n    country = parts[2]\n\n    return {\n      city,\n      province,\n      country\n    }\n  }\n\n  // If we only have 2 parts, we don't know exactly what each part is;\n  // it could still be: city, province/state or a country\n  // For example: Sacramento, California Area\n  if (parts.length === 2) {\n    // 2 possible scenario's are most likely. We strictly check for the following:\n    // first: city + country\n    // second: city + province/state\n\n    if (getIsCity(parts[0]) && getIsCountry(parts[1])) {\n      return {\n        city: parts[0],\n        province,\n        country: parts[1]\n      }\n    }\n\n    // If the second part is NOT a country, it's probably a province/state\n    if (getIsCity(parts[0]) && !getIsCountry(parts[1])) {\n      return {\n        city: parts[0],\n        province: parts[1],\n        country\n      }\n    }\n\n    return {\n      city,\n      province: parts[0],\n      country: parts[1]\n    }\n  }\n\n  // If we only have one part we'll end up here\n\n  // Just find out if it's one of: city, province/state or country\n  if (getIsCountry(parts[0])) {\n    return {\n      city,\n      province,\n      country: parts[0]\n    }\n  } \n  \n  if (getIsCity(parts[0])) {\n    return {\n      city: parts[0],\n      province,\n      country\n    }\n  }\n\n  // Else, it must be a province/state. We just don't know and assume it is.\n  return {\n    city,\n    province: parts[0],\n    country\n  }\n}\n\nexport const getCleanText = (text: string | null) => {\n  const regexRemoveMultipleSpaces = / +/g\n  const regexRemoveLineBreaks = /(\\r\\n\\t|\\n|\\r\\t)/gm\n\n  if (!text) return null\n\n  const cleanText = text\n    .replace(regexRemoveLineBreaks, '')\n    .replace(regexRemoveMultipleSpaces, ' ')\n    .replace('...', '')\n    .replace('See more', '')\n    .replace('See less', '')\n    .trim()\n\n  return cleanText\n}\n\nexport const statusLog = (section: string, message: string, scraperSessionId?: string | number) => {\n  const sessionPart = (scraperSessionId) ? ` (${scraperSessionId})` : ''\n  const messagePart = (message) ? `: ${message}` : null\n  return console.log(`Scraper (${section})${sessionPart}${messagePart}`)\n}\n\nexport const autoScroll = async (page: Page) => {\n  await page.evaluate(async () => {\n    await new Promise((resolve, reject) => {\n      var totalHeight = 0;\n      var distance = 500;\n      var timer = setInterval(() => {\n        var scrollHeight = document.body.scrollHeight;\n        window.scrollBy(0, distance);\n        totalHeight += distance;\n\n        if (totalHeight >= scrollHeight) {\n          clearInterval(timer);\n          resolve();\n        }\n      }, 100);\n    });\n  });\n}\n\nexport const getHostname = (url: string) => {\n  return new URL(url).hostname;\n};\n"]}